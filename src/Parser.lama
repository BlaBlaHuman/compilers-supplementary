-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopFun (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
          {
            [Left , {[s ("!!"), binopFun ]}],
            [Left , {[s ("&&"), binopFun ]}],
            [Nona , {
              [s ("=="), binopFun ],
              [s ("!="), binopFun ],
              [s ("<="), binopFun ],
              [s ("<"), binopFun ],
              [s (">="), binopFun ],
              [s (">"), binopFun ]
            }],
            [Left , {
              [s ("+"), binopFun ],
              [s ("-"), binopFun ]
            }],
            [Left , {
              [s ("*"), binopFun ],
              [s ("/"), binopFun ],
              [s ("%"), binopFun ]
            }]
          }
          , primary
        );

var ifStmt = memo $ eta syntax (
  e=exp kThen thenBody=stmt kElse elseBody=stmt { If (e, thenBody, elseBody) } |
  e=exp kThen thenBody=stmt kElif elseBody=ifStmt { If (e, thenBody, elseBody) } |
  e=exp kThen thenBody=stmt { If (e, thenBody, Skip) }
);

var simpleStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
    kSkip { Skip } |
    x=lident s[":="] e=exp { Assn (x, e) } |
    kWrite e=inbr[s("("), exp, s(")")] { Write (e) } |
    kIf ifSt=ifStmt kFi { ifSt } |
    kWhile cond=exp kDo body=stmt kOd { While(cond, body) } |
    kDo body=stmt kWhile cond=exp kOd { DoWhile(body, cond) } |
    kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo body=stmt kOd { Seq(s1, While (e, Seq(body, s2))) }
  );

var stmt = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq(s1,s2) } );


-- Public top-level parser
public parse = stmt;
