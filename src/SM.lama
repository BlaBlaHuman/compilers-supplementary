-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stck, st, w], insns) {
  case insns of
    {} -> c
    | ins : rest ->
        case ins of
          READ ->
            case readWorld(w) of
              [el, newWorld] -> eval(env, [el : stck, st, newWorld], rest)
            esac
        | WRITE -> eval(env, [tl(stck), st, writeWorld(hd(stck), w)], rest)
        | BINOP (op) ->
            case stck of
              top1 : top2 : bot -> eval(env, [evalOp(op, top2, top1) : bot, st, w], rest)
            esac
        | LD (x) -> eval(env, [st(x) : stck, st, w], rest)
        | ST (x) -> eval(env, [tl(stck), st <- [x, hd(stck)], w], rest)
        | CONST (n) -> eval(env, [n : stck, st, w], rest)
        | LABEL (s) -> eval(env, c, rest)
        | JMP   (l) -> eval(env, c, fromLabel(env, l))
        | CJMP  (v, l) ->
            case v of
              "z" -> eval(env, [tl(stck), st, w], if hd(stck) == 0 then fromLabel(env, l) else rest fi)
              | "nz" -> eval(env, [tl(stck), st, w], if hd(stck) != 0 then fromLabel(env, l) else rest fi)
            esac
        | DROP -> eval(env, [tl(stck), st, w], rest)
        | DUP -> eval(env, [hd(stck):stck, st, w], rest)
        | LDA (x) -> eval(env, [x : stck, st, w], rest)
        | STI ->
          case stck of
            v : x : bot -> eval(env, [v : bot, st <- [x, v], w], rest)
          esac
        esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)     ->
      case genLabel(env) of
        [lab1, env] ->
          case compile (lab1, env, e) of
            [used, env, code] -> [false, env, code <+> label (lab1, used) <+ DROP]
          esac
      esac
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      ->
      case genLabel(env) of
        [lab1, env] ->
          case compile (lab1, env, e) of
            [used, env, code] -> [false, env, code <+> label(lab1, used) <+ WRITE]
          esac
      esac
    | Assn  (x, e)   ->
      case genLabels(env, 2) of
        [lab1, lab2, env] ->
          case compile (lab1, env, x) of
            [used1, env, code1] ->
              case compile(lab2, env, e) of
                [used2, env, code2] -> [false, env, code1 <+> label (lab1, used1) <+> code2 <+> label (lab2, used2) <+ STI]
              esac
          esac
      esac
    |  Binop  (op, e1, e2) ->
        case genLabels(env, 2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, e1) of
              [used1, env, code1] ->
                case compile (lab2, env, e2) of
                  [used2, env, code2] -> [false, env, code1 <+> label (lab1, used1) <+> code2 <+> label (lab2, used2) <+ (BINOP (op))]
                esac
            esac
        esac
    | Seq   (s1, s2) ->
        case genLabel(env) of
          [s1Lab, env] ->
            case compile (s1Lab, env, s1) of
              [s1LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s1Lab, s1LabUsed) <+> s2Code]
                  esac
            esac
        esac
    | While (e, s) ->
        case genLabels(env, 2) of
          [condLab, bodyLab, env] ->
            case compile(condLab, env, s) of
            [_, env, codeBody] ->
              case genLabel(env) of
                [lab1, env] ->
                  case compile (lab1, env, e) of
                    [used, env, codeCond] -> [false, env, singletonBuffer(JMP (condLab)) <+ LABEL(bodyLab) <+> codeBody <+ LABEL(condLab) <+> codeCond <+> label(lab1, used) <+ CJMP("nz", bodyLab)]
                  esac
              esac
            esac
        esac
    | If (e, thenBranch, elseBranch) ->
        case genLabels(env, 2) of
          [condLab, elseLab, env] ->
            case compile(lab, env, thenBranch) of
              [_, env, thenCode] ->
                case compile(lab, env, elseBranch) of
                  [_, env, elseCode] ->
                    case compile (condLab, env, e) of
                      [used, env, codeCond] -> [true, env, codeCond <+> label(condLab, used) <+ CJMP("z", elseLab) <+> thenCode <+ JMP (lab) <+ LABEL(elseLab) <+> elseCode <+ JMP(lab)]
                    esac
                esac
            esac
        esac
    | DoWhile (s, e) ->
        case genLabels(env, 2) of
          [condLab, bodyLab, env] ->
            case compile(condLab, env, s) of
            [_, env, codeBody] ->
              case genLabel(env) of
                [lab1, env] ->
                  case compile (lab1, env, e) of
                    [used, env, codeCond] -> [false, env, singletonBuffer(LABEL(bodyLab)) <+> codeBody <+ LABEL(condLab) <+> codeCond <+> label(lab1, used) <+ CJMP("nz", bodyLab)]
                  esac
              esac
            esac
        esac
    | _ -> failure("Statement %s is not supported", stmt.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
