-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stck, st, w], insns) {
  case insns of
    {} -> c
    | ins : rest ->
        case ins of
          READ ->
            case readWorld(w) of
              [el, newWorld] -> eval([el : stck, st, newWorld], rest)
            esac
        | WRITE ->
            case stck of
              top : bot -> eval([bot, st, writeWorld(top, w)], rest)
            esac
        | BINOP (op) ->
            case stck of
              top1 : top2 : bot -> eval([evalBinOp(op, top2, top1) : bot, st, w], rest)
            esac
        | LD (x) -> eval([st(x) : stck, st, w], rest)
        | ST (x) ->
            case stck of
              top : bot -> eval([bot, st <- [x, top], w], rest)
            esac
        | CONST (n) -> eval([n : stck, st, w], rest)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (s) -> { LD(s) }
    | Const (i) -> { CONST(i) }
    | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ { BINOP(s) }
    | _ -> failure("Expression %s is not supported", expr.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e) -> compileExpr(e) +++ { ST(x) }
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (x) -> { READ, ST(x) }
    | Write (e) -> compileExpr(e) +++ { WRITE }
    | _ -> failure("Statement %s is not supported", stmt.string)
  esac
}
