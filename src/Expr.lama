-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinOp (op, e1, e2) {
  case op of
      "+" -> e1 + e2
    | "-" -> e1 - e2
    | "*" -> e1 * e2
    | "/" -> e1 / e2
    | "%" -> e1 % e2
    | "<" -> e1 < e2
    | ">" -> e1 > e2
    | "<=" -> e1 <= e2
    | ">=" -> e1 >= e2
    | "==" -> e1 == e2
    | "!=" -> e1 != e2
    | "&&" -> e1 && e2
    | "!!" -> e1 !! e2
    | _ -> failure("Operation %s is not supported", op)
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var (x) -> st(x)
    | Const (i) -> i
    | Binop (s, e1, e2) -> evalBinOp (s, evalExpr(st, e1), evalExpr(st, e2))
    | _ -> failure("Expression %s is not supported", expr.string)
  esac
}
