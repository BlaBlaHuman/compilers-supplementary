-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
      Assn (x, e) -> [s <- [x, evalExpr(s, e)], w]
    | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
    | Skip -> c
    | Read (x) ->
      case readWorld(w) of
        [inp, new] -> [s <- [x, inp], new]
      esac
    | Write (e) -> [s, writeWorld(evalExpr(s, e), w)]
    | If (e, thenBranch, elseBranch) ->
      eval(c, if evalExpr(s, e) == 1 then thenBranch else elseBranch fi)
    | While (e, body) ->
      if evalExpr(s, e) == 1 then eval(c, Seq(body, stmt)) else c fi
    | DoWhile (body, e) -> eval(c, Seq(body, While(e, body)))
    | _ -> failure("Statement %s is not supported", stmt.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
